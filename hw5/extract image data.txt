#!/usr/bin/env python3

from scipy import *
from scipy.misc import imread
from matplotlib.pyplot import show, imshow, spy, figure, subplot


# load the image from a file
filename = 'hangingchain.png'
a = imread(filename)
print(a.shape)
figure(1,figsize=(18,6))
subplot(1,3,1)
imshow(a[:,:,0], cmap='gray')
subplot(1,3,2)
imshow(a[:,:,1], cmap='gray')
subplot(1,3,3)
imshow(a[:,:,2], cmap='gray')

# Crop and work with just one color layer (red) instead of all 3
# so we will have just a matrix with which to work.
b = a[32:500,138:960,0]

# inspect the layer
print(b.shape)
print(min(b.flatten()), max(b.flatten()))
print(b.dtype)

# turn layer into binary float data so
# it is black or white -- no grays.
c = floor(b*1./255-.8)+1

# remove chalkboard joints using some simple
# rectangular masking
c[0:380,530:540] = 0.
c[410:,530:540] = 0.

# Let's look at the final result...
figure(2)
spy(c); show()
# While some parts of the chain are coming
# out a little thin, we've got the shape,
# without any weird out-lying points to
# mess up or fit.  Good enough.

# Now, we need to extract and organize
# the data points conveniently so we
# can do curve-fitting.  Our coordinates
# will be the indexes of matrix entries
# that are 1, not zero.
y, x = c.nonzero()

# The y-values come out reversed from our
# intuition -- higher y values are lower
# in the matrix.  So, we flip the y-coordinates
# to match our standard axes.
y = max(y)-y


# we want to sort the points according to
# their x-values, just in cases.
# So, make pairs of coordinates for each point,
# and then sort them, and then transform back
# to the x,y vectors.
z = list(zip(list(x),list(y)))
z.sort()
x, y = list(map(array,list(zip(*z))))

# finally, make a 2-d array of our data points,
# which we can save.
data = vstack([x,y]).T


#savetxt('chain_autodata.txt', data, delimiter=',')